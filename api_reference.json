{
  "Drash.Dictionaries.LogLevels": [
    "  /**\n * The log levels which are organized by rank in ascending order.\n */\nexport enum LogLevel",
    "  /**\n * A dictionary of log levels used in the logger classes to properly\n * display, rank, and prioritize log messages.\n */\nexport const LogLevels = new Map<string, Drash.Interfaces.LogLevelStructure>([\n  [\"off\","
  ],
  "Drash.Dictionaries.MimeDb": [
    "  /**\n * The interface used for MIME Types.\n *\n *     [key: string]\n *\n *         The mime type (e.g., \"application/json\").\n *\n *         charset\n *\n *             The character encoding of the MIME type.\n *\n *         compressible\n *\n *             Is this MIME type compressible?\n *\n *         extensions\n *\n *             An array of extensions that match this MIME type.\n *\n *         source\n *\n *             The source of the MIME type's data (e.g., \"iana\")\n *\n */\ninterface IMime",
    "  /**\n * The MIME database.\n */\nexport const mime_db: IMime ="
  ],
  "Drash.Exceptions.ConfigsException": [
    "  /**\n * Throw semantic errors related to configuration settings.\n */\nexport class ConfigsException extends Error",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param message - (optional) The exception message.\n   */\n  constructor(message: string = \"Config is missing or invalid.\")"
  ],
  "Drash.Exceptions.HttpException": [
    "  /**\n * This class gives you a way to throw HTTP errors semantically.\n */\nexport class HttpException extends Error",
    "  /**\n   * A property to hold the HTTP response code associated with this\n   * exception.\n   */\n  public code: number",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param code - The HTTP response code associated with this exception.\n   * @param message - (optional) The exception message.\n   */\n  constructor(code: number, message?: string)"
  ],
  "Drash.Exceptions.HttpMiddlewareException": [
    "  /**\n * This class gives you a way to throw HTTP errors semantically in the\n * middleware classes. The difference between this class and HttpException\n * comes when you want to check which exception was thrown via\n * exception.constructor.name.\n */\nexport class HttpMiddlewareException extends HttpException"
  ],
  "Drash.Exceptions.HttpResponseException": [
    "  /**\n * This class gives you a way to throw HTTP errors semantically in the\n * response class. The difference between this class and HttpException\n * comes when you want to check which exception was thrown via\n * exception.constructor.name.\n */\nexport class HttpResponseException extends HttpException"
  ],
  "Drash.Exceptions.InvalidPathException": [
    "  /**\n * This class is for throwing errors related to resource paths.\n */\nexport class InvalidPathException extends Error",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param message - (optional) The exception message.\n   */\n  constructor(message: string = \"Path must be a string.\")"
  ],
  "Drash.Exceptions.NameCollisionException": [
    "  /**\n * This class gives you a way to throw name collision errors. For example,\n * if you try to add two loggers via Drash.addLogger() with the same name,\n * then this exception will be thrown because the names are colliding.\n */\nexport class NameCollisionException extends Error",
    "  /**\n   * A property to hold the error message associated with this\n   * exception.\n   */\n  public message: string",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param message - (optional) The exception message.\n   */\n  constructor(message: string)"
  ],
  "Drash.Http.Request": [
    "  /**\n     * Construct an object of this class.\n     *\n     * @param ServerRequest - originalRequest\n     *     The original Deno ServerRequest object that's used to help create this\n     *     Drash.Http.Request object. There are some data members that the\n     *     original request has that can't be attached to this object. Therefore,\n     *     we keep track of the original request if we ever want to access data\n     *     members from it. An example of a data member that we want to access is\n     *     the original request's body.\n     * @param IOptions - options to be used in the server\n     */\n  constructor(originalRequest: ServerRequest, options?: IOptions)",
    "  /**\n   * Used to check which headers are accepted.\n   *\n   * @param type - It is either a string or an array of strings that contains\n   * the Accept Headers.\n   * @returns Either true or the string of the correct header.\n   */\n  public accepts(type: string | string[]): boolean | string",
    "  /**\n   * Gets all the body params\n   *\n   * @return The parsed body as an object\n   */\n  public getAllBodyParams(): Drash.Interfaces.ParsedRequestBody",
    "  /**\n   * Gets all header params\n   *\n   * @return Key value pairs for the header name and it's value\n   */\n  public getAllHeaderParams():",
    "  /**\n   * Get all the path params.\n   *\n   * @return A key-value pair object where the key is the param name and the\n   * value is the param value.\n   */\n  public getAllPathParams():",
    "  /**\n   * Gets a record whose keys are the request's url query params specified by inputs\n   * and whose values are the corresponding values of the query params.\n   * \n   * @returns Key value pairs of the query param and its value. Empty object if no query params\n   */\n  public getAllUrlQueryParams():",
    "  /**\n   * Get the requested file from the body of a multipart/form-data request, by\n   * it's name.\n   *\n   * @param input - The name of the file to get.\n   *\n   * @return The file requested or `undefined` if not available.\n   */\n  public getBodyFile(input: string): FormFile | undefined",
    "  /**\n   * Get the value of one of this request's body params by its input name.\n   *\n   * @returns The corresponding parameter or null if not found\n   */\n  public getBodyParam(\n    input: string,\n  ): string |",
    "  /**\n   * Get a cookie value by the name that is sent in with the request.\n   *\n   * @param cookie - The name of the cookie to retrieve\n   *\n   * @returns The cookie value associated with the cookie name or `undefined` if\n   * a cookie with that name doesn't exist\n   */\n  public getCookie(name: string): string",
    "  /**\n   * Get the value of one of this request's headers by its input name.\n   *\n   * @returns The corresponding header or null if not found.\n   */\n  public getHeaderParam(input: string): string | null",
    "  /**\n   * Get the value of one of this request's path params by its input name.\n   *\n   * @returns The corresponding path parameter or null if not found.\n   */\n  public getPathParam(input: string): string | null",
    "  /**\n   * Get this request's URL path.\n   *\n   * @returns The URL path.\n   */\n  public getUrlPath(serverRequest: ServerRequest): string",
    "  /**\n   * Get the value of one of this request's query params by its input name.\n   *\n   * @returns The corresponding query parameter from url or null if not found.\n   */\n  public getUrlQueryParam(input: string): string | null",
    "  /**\n   * Get the request's URL query params by parsing its URL query string.\n   *\n   * @return The URL query string in key-value pair format.\n   *\n   * ```ts\n   *",
    "  /**\n   * Get the specified HTTP request's URL query string.\n   *\n   * @returns The URL query string (e.g., key1=value1&key2=value2) without the\n   * leading \"?\" character. Could be null if not available\n   */\n  public getUrlQueryString(): null | string",
    "  /**\n   * Does the specified request have a body?\n   *\n   * @returns A boolean `Promise`. `true` if the request has a body, `false` if\n   * not.\n   */\n  public async hasBody(): Promise<boolean>",
    "  /**\n   * Parse the specified request's body.\n   *\n   * @param options - See IOptions.\n   *\n   * @returns The content type of the body, and based on this the body itself in\n   * that format. If there is no body, it returns an empty properties\n   */\n  public async parseBody(\n    options?: IOptions,\n  ): Promise<Drash.Interfaces.ParsedRequestBody>",
    "  /**\n   * Parse this request's body as application/x-www-form-url-encoded.\n   *\n   * @returns A `Promise` of an empty object if no body exists, else a key/value\n   * pair array (e.g., `returnValue['someKey']`).\n   */\n  public async parseBodyAsFormUrlEncoded(): Promise<\n   ",
    "  /**\n   * Parse this request's body as application/json.\n   *\n   * @returns A `Promise` of a JSON object decoded from request body.\n   */\n  public async parseBodyAsJson(): Promise<{ [key: string]: unknown }>",
    "  /**\n   * Parse this request's body as multipart/form-data.\n   *\n   * @param body - The request's body.\n   * @param boundary - The boundary of the part (e.g., `----------437192313`)\n   * @param maxMemory - The maximum memory to allocate to this process in\n   * megabytes.\n   *\n   * @return A Promise<MultipartFormData>.\n   */\n  public async parseBodyAsMultipartFormData(\n    body: Reader,\n    boundary: string,\n    maxMemory: number,\n  ): Promise<MultipartFormData>",
    "  /**\n   * Respond the the client's request by using the original request's\n   * `respond()` method.\n   *\n   * @param output - The data to respond with.\n   */\n  public async respond(\n    output: Drash.Interfaces.ResponseOutput,\n  ): Promise<void>",
    "  /**\n   * Set headers on the request.\n   *\n   * @param headers - Headers in the form of `{[key: string]: string}`.\n   */\n  public setHeaders(headers:"
  ],
  "Drash.Http.Resource": [
    "  /**\n * This is the base resource class for all resources. All resource classes\n * must be derived from this class.\n */\nexport class Resource implements Drash.Interfaces.Resource",
    "  /**\n     * A property to hold the middleware this resource uses.\n     */\n  public middleware:",
    "  /**\n     * A property to hold the name of this resource. This property is used by\n     * Drash.Http.Server to help it store resources in its resources property\n     * by name.\n     */\n  public name: string = \"\"",
    "  /**\n     * A property to hold the paths to access this resource.\n     *\n     * All derived resource classes MUST define this property as static\n     * (e.g., static paths = [\"path\"]",
    "  /**\n     * A property to hold the expanded versions of the paths. An expanded version of a path looks like the following:\n     * ```ts\n     *",
    "  /**\n     * The request object.\n     */\n  protected request: Drash.Http.Request",
    "  /**\n     * The response object.\n     */\n  protected response: Drash.Http.Response",
    "  /**\n     * The server object.\n     */\n  protected server: Drash.Http.Server",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param request - The request object.\n   * @param response - The response object.\n   * @param server - The server object.\n   * @param paths - The paths the resource accepts\n   * @param middleware - Any middleware for the resource\n   */\n  constructor(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response,\n    server: Drash.Http.Server,\n    paths: string[],\n    middleware:"
  ],
  "Drash.Http.Response": [
    "  /**\n * Response handles sending a response to the client making the request.\n */\nexport class Response",
    "  /**\n   * A property to hold the body of this response.\n   */\n  public body: boolean | null | object | string | undefined = \"\"",
    "  /**\n   * A property to hold this response's headers.\n   */\n  public headers: Headers",
    "  /**\n   * The request object.\n   */\n  public request: Drash.Http.Request",
    "  /**\n   * A property to hold this response's status code (e.g., 200 for OK).\n   * This class uses Status and STATUS_TEXT from the Deno Standard\n   * Modules' http_status module for response codes.\n   */\n  public status_code: number = Status.OK",
    "  /**\n   * An object of options to help determine how this object should behave.\n   */\n  protected options: IOptions",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param request - Contains the request object\n   *\n   * @param options - The response options\n   */\n  constructor(request: Drash.Http.Request, options: IOptions =",
    "  /**\n   * This method allows users to make `this.response.render()` calls in\n   * resources. This method is also used by Tengine:\n   *\n   *   https://github.com/drashland/deno-drash-middleware/tree/master/tengine\n   */\n  public render(\n    ...args: unknown[]\n  ): Promise<boolean | string> | boolean | string",
    "  /**\n   * Create a cookie to be sent in the response. Note: Once set, it cannot be\n   * read until the next request\n   *\n   * @param cookie - Object holding all the properties for a cookie object\n   */\n  public setCookie(cookie: Cookie): void",
    "  /**\n   * Delete a cookie before sending a response\n   *\n   * @param cookieName - The cookie name to delete\n   */\n  public delCookie(cookieName: string): void",
    "  /**\n   * Generate a response.\n   *\n   * @returns The response in string form.\n   */\n  public generateResponse(): string",
    "  /**\n   * Get the status message based on the status code.\n   *\n   * @returns The status message associated with this.status_code. For example,\n   * if the response's status_code is 200, then this method will return \"OK\" as\n   * the status message.\n   */\n  public getStatusMessage(): null | string",
    "  /**\n   * Get the full status message based on the status code. This is just the\n   * status code and the status message together. For example:\n   *\n   * - If the status code is 200, then this will return \"200 (OK)\"\n   * - If the status code is 404, then this will return \"404 (Not Found)\"\n   *\n   * @returns The status code\n   */\n  public getStatusMessageFull(): null | string",
    "  /**\n   * Redirect the client to another URL.\n   *\n   * @param httpStatusCode - Response's status code.\n   * - Permanent: (301 and 308)\n   * - Temporary: (302, 303, and 307)\n   * @param location - URL of desired redirection. Relative or external paths\n   * (e.g., \"/users/1\", https://drash.land)\n   *\n   * @returns The final output to be sent.\n   */\n  public redirect(\n    httpStatusCode: number,\n    location: string,\n  ): Drash.Interfaces.ResponseOutput",
    "  /**\n   * Send the response to the client making the request.\n   *\n   * @returns A `Promise` of the output which is passed to `request.respond()`.\n   * The output is only returned for unit testing purposes. It is not intended\n   * to be used elsewhere as this call is the last call in the\n   * request-resource-response lifecycle.\n   */\n  public async send(): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Send the response of a static asset (e.g., a CSS file, JS file, PDF file,\n   * etc.) to the client making the request.\n   *\n   * @param file - The file that will be served to the client.\n   * @param contents - The content in a `Uint8Array`.\n   *\n   * @returns The final output to be sent.\n   */\n  public sendStatic(): Drash.Interfaces.ResponseOutput",
    "  /**\n   * Get the content type from the request object's \"Accept\" header. Default to\n   * the response_output config passed in when the server was created if no\n   * accept header is specified. If no response_output config was passed in\n   * during server creation, then default to application/json.\n   *\n   *\n   * @returns A content type to set as this object's content-type header. If\n   * multiple content types are passed in, then return the first accepted\n   * content type.\n   */\n  protected getContentTypeFromRequestAcceptHeader(): string"
  ],
  "Drash.Http.Server": [
    "  /**\n * Server handles the entire request-resource-response lifecycle. It is in\n * charge of handling HTTP requests to resources, static paths, sending\n * appropriate responses, and handling errors that bubble up within the\n * request-resource-response lifecycle.\n */\nexport class Server",
    "  /**\n   * A property to hold the Deno server. This property is set in\n   * this.run() like so:\n   *\n   *     this.deno_server = serve(HTTPOptions)",
    "  /**\n   * The hostname of the Deno server.\n   */\n  public hostname: string = \"localhost\"",
    "  /**\n   * The port of the Deno server.\n   */\n  public port: number = 1447",
    "  /**\n   * A property to hold this server's configs.\n   */\n  protected configs: Drash.Interfaces.ServerConfigs",
    "  /**\n   * A property to hold server-level middleware. This includes the following\n   * middleware types:\n   *\n   *     - after request\n   *     - after resource\n   *     - before request\n   *     - compile time\n   *     - runtime\n   */\n  protected middleware: ServerMiddleware =",
    "  /**\n   * A property to hold this server's services.\n   */\n  protected services: IServices =",
    "  /**\n   * This server's list of static paths. HTTP requests to a static path are\n   * usually intended to retrieve some type of concrete resource (e.g., a\n   * CSS file or a JS file). If an HTTP request is matched to a static path\n   * and the resource the HTTP request is trying to get is found, then\n   * Drash.Http.Response will use its sendStatic() method to send the\n   * static asset back to the client.\n   *\n   * TODO(crookse) Change this to a Map.\n   */\n  protected static_paths: string[] |",
    "  /**\n   * This server's list of static paths as virtual paths. Virtual paths allow\n   * users to map a path that does not exist to a physical path on their\n   * filesystem. This is helpful when you want to structure your application's\n   * filesystem in a way that separates sever- and client-side code. Instead of\n   * giving end users access to your entire filesystem, you can give them access\n   * to specific directories by using virtual paths. Also, see\n   * `this.static_paths` for more information.\n   */\n  protected virtual_paths: Map<string, string> = new Map<string, string>()",
    "  /**\n   * Construct an object of this class.\n   *\n   * @param configs - The config of Drash Server\n   */\n  constructor(configs: Drash.Interfaces.ServerConfigs)",
    "  /**\n   * Handle an HTTP request from the Deno server.\n   *\n   * @param serverRequest - The incoming request object.\n   *\n   * @returns A Promise of ResponseOutput.\n   */\n  public async handleHttpRequest(\n    serverRequest: ServerRequest,\n  ): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Handle cases when an error is thrown when handling an HTTP request.\n   *\n   * @param request - The request object.\n   * @param error - The error object.\n   * @param resource - (optional) Pass in the resource that threw the error.\n   * @param response - (optional) Pass in the response that threw the error.\n   *\n   * @returns A Promise of ResponseOutput.\n   */\n  public async handleHttpRequestError(\n    request: Drash.Http.Request,\n    error: Drash.Exceptions.HttpException,\n    resource: Drash.Http.Resource | null = null,\n    response: Drash.Http.Response | null = null,\n  ): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Handle HTTP requests for the favicon. This method only exists to\n   * short-circuit favicon requests--preventing the requests from clogging\n   * the logs.\n   *\n   * @param request - The request object\n   *\n   * @returns The response as stringified JSON. This is only used for\n   * unit testing purposes.\n   */\n  public async handleHttpRequestForFavicon(\n    request: Drash.Http.Request,\n  ): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Handle HTTP requests for static path assets.\n   *\n   * @param request - The request object\n   *\n   * @returns The response as stringified JSON. This is only used for unit\n   * testing purposes.\n   */\n  public async handleHttpRequestForStaticPathAsset(\n    request: Drash.Http.Request,\n  ): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Handle HTTP requests for virtual path assets.\n   *\n   * @param request - The request object.\n   *\n   * @returns The response as stringified JSON. This is only used for unit\n   * testing purposes.\n   */\n  public async handleHttpRequestForVirtualPathAsset(\n    request: Drash.Http.Request,\n  ): Promise<Drash.Interfaces.ResponseOutput>",
    "  /**\n   * Run the Deno server at the hostname specified in the configs. This method\n   * takes each HTTP request and creates a new and more workable request object\n   * and passes it to `.handleHttpRequest()`.\n   *\n   * @param options - The HTTPOptions interface from https://deno.land/std/http/server.ts.\n   *\n   * @returns A Promise of the Deno server from the serve() call.\n   */\n  public async run(options: HTTPOptions): Promise<DenoServer>",
    "  /**\n   * Run the Deno server at the hostname specified in the configs as an HTTPS\n   * Server. This method takes each HTTP request and creates a new and more\n   * workable request object and passes it to `.handleHttpRequest()`.\n   *\n   * @param options - The HTTPSOptions interface from https://deno.land/std/http/server.ts.\n   *\n   * @returns A Promise of the Deno server from the serve() call.\n   */\n  public async runTLS(options: HTTPSOptions): Promise<DenoServer>",
    "  /**\n   * Close the server.\n   */\n  public close(): void",
    "  /**\n   * Add the middleware passed in via configs.\n   */\n  protected async addMiddleware(): Promise<void>",
    "  /**\n   * Add an HTTP resource to the server which can be retrieved at specific\n   * URIs.\n   *\n   * Drash defines an HTTP resource according to the MDN Web docs\n   * [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web).\n   *\n   * @param resourceClass - A child object of the `Drash.Http.Resource` class.\n   */\n  protected addResource(resourceClass: Drash.Interfaces.Resource): void",
    "  /**\n   * Add the resources passed in via configs.\n   */\n  protected addResources(): void",
    "  /**\n   * Add a static path for serving static assets like CSS files, JS files,\n   * PDF files, etc.\n   *\n   * @param path - The path where the static assets are located.\n   * @param virtualPath - Is this a virtual path?\n   */\n  protected addStaticPath(\n    path: string,\n    virtualPath?: string,\n  ): void",
    "  /**\n   * Add static paths passed in via configs.\n   */\n  protected addStaticPaths(): void",
    "  /**\n   * Build the configs for this server -- making sure to set any necessary\n   * defaults.\n   *\n   * @param configs - The configs passed in by the user.\n   *\n   * @return The configs.\n   */\n  protected buildConfigs(\n    configs: Drash.Interfaces.ServerConfigs,\n  ): Drash.Interfaces.ServerConfigs",
    "  /**\n   * Get the request object with more properties and methods.\n   *\n   * @param request - The request object.\n   *\n   * @returns Returns a Drash request object--hydrated with more properties and\n   * methods than the ServerRequest object. These properties and methods are\n   * used throughout the Drash request-resource-response lifecycle.\n   */\n  protected async buildRequest(\n    serverRequest: ServerRequest,\n  ): Promise<Drash.Http.Request>",
    "  /**\n   * Get the resource class.\n   *\n   * @param request - The request object.\n   *\n   * @returns A `Drash.Http.Resource` object if the URL path of the request can\n   * be matched to a `Drash.Http.Resource` object's paths. Otherwise, it returns\n   * `undefined` if a `Drash.Http.Resource` object can't be matched.\n   */\n  protected buildResource(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response,\n  ): Drash.Http.Resource",
    "  /**\n   * Get a response object.\n   *\n   * @param request - The request object.\n   *\n   * @returns A response object.\n   */\n  protected buildResponse(request: Drash.Http.Request): Drash.Http.Response",
    "  /**\n   * Execute server-level middleware after the request.\n   *\n   * @param request - The request object.\n   * @param resource - The resource object.\n   */\n  protected async executeMiddlewareAfterRequest(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response | null = null,\n  ): Promise<void>",
    "  /**\n   * Execute server-level middleware after a resource has been found, but before\n   * the resource's HTTP request method is executed.\n   *\n   * @param request - The request object.\n   * @param resource - The resource object.\n   */\n  protected async executeMiddlewareAfterResource(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response,\n  ): Promise<void>",
    "  /**\n   * Execute server-level middleware before the request.\n   *\n   * @param request - The request object.\n   * @param resource - The resource object.\n   */\n  protected async executeMiddlewareBeforeRequest(\n    request: Drash.Http.Request,\n  ): Promise<void>",
    "  /**\n   * Execute server level runtime middleware after requests. Runtime middleware\n   * requires compile time data from compile time middleware.\n   *\n   * @param request - The request objecft.\n   * @param response - The response object.\n   */\n  protected executeMiddlewareRuntime(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response,\n  ): void",
    "  /**\n   * The the resource that will handled the specified request based on the\n   * request's URI.\n   *\n   * @param request - The request object.\n   *\n   * @return The resource as a constructor function to be used in\n   * `.buildResource()`.\n   */\n  protected findResource(\n    request: Drash.Http.Request,\n  ): Drash.Interfaces.Resource",
    "  /**\n   * Get the path params in a request URL.\n   *\n   * @param resource - The resource that has the information about param names.\n   * These param names are associated with the values of the path params in the\n   * request URL.\n   * @param matchArray - An array containing the path params (as well as other\n   * information about the request URL).\n   */\n  protected getRequestPathParams(\n    resource: Drash.Interfaces.Resource | undefined,\n    matchArray: RegExpMatchArray | null,\n  ):",
    "  /**\n   * Get resource paths for the path in question. These paths are use to match\n   * request URIs to a resource.\n   *\n   * @param path - The path to parse into parsable pieces.\n   *\n   * @return A resource paths object.\n   */\n  protected getResourcePaths(\n    path: string,\n  ): Drash.Interfaces.ResourcePaths",
    "  /**\n   * Get resource paths for the path in question. The path in question should\n   * have at least one optional param. An optiona param is like :id in the\n   * following path:\n   *\n   *     /my-path/:id?\n   *\n   . These paths are use * to match request URIs to a resource.\n   *\n   * @param path - The path to parse into parsable pieces.\n   *\n   * @return A resource paths object.\n   */\n  protected getResourcePathsUsingOptionalParams(\n    path: string,\n  ): Drash.Interfaces.ResourcePaths",
    "  /**\n   * Get resource paths for the wildcard path in question. These paths are use\n   * to match request URIs to a resource.\n   *\n   * @param path - The path to parse into parsable pieces.\n   *\n   * @return A resource paths object.\n   */\n  protected getResourcePathsUsingWildcard(\n    path: string,\n  ): Drash.Interfaces.ResourcePaths",
    "  /**\n   * Used to check if a response object is of type Drash.Interfaces.ResponseOutput\n   * or Drash.Http.Response.\n   *\n   * @return If the response returned from a method is what the returned value should be\n   */\n  protected isValidResponse(\n    request: Drash.Http.Request,\n    response: Drash.Http.Response,\n    resource: Drash.Http.Resource,\n  ): boolean",
    "  /**\n   * Listens for incoming HTTP connections on the server property\n   */\n  protected async listen()",
    "  /**\n   * Log a message. This only works if the server has a logger and it is set to\n   * log \"debug\" level messages.\n   *\n   * @param message - Message to log\n   */\n  protected log(message: string): void",
    "  /**\n   * Is the request targeting a static path?\n   *\n   * @param request - The request object\n   *\n   * @returns Either true or false. If the request targets a static path then it\n   * returns true. Otherwise it returns false.\n   */\n  protected requestTargetsStaticPath(request: Drash.Http.Request): boolean",
    "  /**\n   * Is the request targeting a virtual path?\n   *\n   * @param request - The request object.\n   *\n   * @returns True if yes"
  ],
  "Drash.Interfaces.LogLevelStructure": [
    "  /**\n * Contains the type of LogLevelStructure.\n *\n * name\n *\n *     The name of the log level (e.g., \"debug\").\n *\n * rank\n *\n *     The rank of the log level. See the Drash.Dictionaries.LogLevels.LogLevel\n *     enum member to see the ranking structure of the log levels.\n */\nexport interface LogLevelStructure"
  ],
  "Drash.Interfaces.LoggerConfigs": [
    "  /**\n * Contains the type of LoggerConfigs.\n *\n * enabled\n *\n *     Is the logger enabled? This is useful if you have a config file that\n *     can toggle this option between `true` and `false`.\n *\n * file\n *\n *     The filename to log to (used in Drash.CoreLoggers.FileLogger).\n *\n * level\n *\n *     Options are:\n *\n *         all\n *         trace\n *         debug (defaults to this)\n *         info\n *         warn\n *         error\n *         fatal\n *         off\n *\n * tag_string\n *\n *     A string with tags. Tags must be wrapped in brackets in order for the\n *     logger classes to properly identify them. For example,\n *\n *        "
  ],
  "Drash.Interfaces.ParsedRequestBody": [
    "  /**\n * Contains the type of ParsedRequestBody.\n *\n * content_type\n *\n *     The Content-Type of the request body. For example, if the body is JSON,\n *     then the Content-Type should be application/json.\n *\n * data\n *\n *     The data passed in the body of the request.\n */\nexport interface ParsedRequestBody"
  ],
  "Drash.Interfaces.Resource": [
    "  /**\n * Contains the type of Resource.\n *\n * middleware\n *\n *     The list of middleware this resource uses.\n *\n * name\n *\n *     The name of this resource.\n *\n * paths\n *\n *     The list of paths that clients can use to access this resource.\n *\n * paths_parsed\n *\n *     The list of paths parsed into Drash.Interface.ResourcePaths objects. This\n *     is used internally in Drash.Http.Server.\n */\nexport interface Resource"
  ],
  "Drash.Interfaces.ResourcePaths": [
    "  /**\n * Contains the type of ResourcePaths.\n *\n * og_path\n *\n *     The path in its original format (e.g., \"/some-path\").\n *\n * regex_path\n *\n *     The path in a regex format (e.g., ^/some-path/?$).\n *\n * params\n *\n *     The path's path params (e.g., \"some_param\" would be stored in this field\n *     if the path was \"/:some_param\" or \"/{some_param}\").\n */\nexport interface ResourcePaths"
  ],
  "Drash.Interfaces.ResponseOutput": [
    "  /**\n * Contains the type of ResponseOutput.\n *\n * body\n *\n *     The responses' body (e.g, \"some body\","
  ],
  "Drash.Interfaces.ServerConfigs": [
    "  /**\n * Contains the type of ServerConfigs\n *\n * directory\n *\n *     The path to the directory of the server on the filesystem.  This is\n *     used when resolving static paths, so make sure you have this set\n *     correctly if you are serving static paths. A quick way to implement\n *     this could be the following:\n *\n *         directory: `${await Deno.realpath('.')}`\n *\n * logger\n *\n *     The server's logger. For example:\n *\n *         logger: new Drash.CoreLoggers.ConsoleLogger({\n *           enabled: true,\n *           level: \"debug\",\n *           tag_string: \"{date} |"
  ],
  "Drash.Interfaces.ServerMiddleware": [
    "  /**\n * Contains the type of ServerMiddleware.\n *\n * before_request\n *\n *     An array of functions that take a Drash.Http.Request as a parameter.\n *     Method can be async.\n *\n * after_request\n *\n *     An array of functions that take in a Drash.Http.Request as the first\n *     parameter, and a Drash.Http.Response as the second parameter.\n *     Method can be async\n *\n * @example\n *\n *     function beforeRequestMiddleware (\n *       request: Drash.Http.Request\n *     ): void"
  ],
  "Drash.Services.HttpService": [
    "  /**\n * This class helps perform HTTP-related processes.\n */\nexport class HttpService",
    "  /**\n   * Checks if the incoming request accepts the type(s) in the parameter.  This\n   * method will check if the requests `Accept` header contains the passed in\n   * types\n   *\n   * @param request - The request object containing the `Accept` header.\n   * @param type - The content-type/mime-type(s) to check if the request accepts\n   * it.\n   *\n   * @remarks\n   * Below are examples of how this method is called from the request object\n   * and used in resources:\n   *\n   * ```ts\n   * // File: your_resource.ts // assumes the request accepts \"text/html\"\n   * const val = this.request.accepts(\"text/html\")",
    "  /**\n   * Get a MIME type for a file based on its extension.\n   *\n   * @param filePath - The file path in question.\n   * @param fileIsUrl - (optional) Is the file path  a URL to a file? Defaults\n   * to false.  If the file path is a URL, then this method will make sure the\n   * URL query string is not included while doing a lookup of the file's\n   * extension.\n   *\n   * @returns The name of the MIME type based on the extension of the file path\n   * .\n   */\n  public getMimeType(\n    filePath: string | undefined,\n    fileIsUrl: boolean = false,\n  ): null | string"
  ],
  "Drash.Services.StringService": [
    "  /**\n * This class helps perform string-related processes like string\n * transformations, reading, and replacing.\n */\nexport class StringService",
    "  /**\n   * Parse a URL query string in it's raw form.\n   *\n   * If the request body's content type is `application/json`, then:\n   *"
  ]
}